@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using ServerSide.Data
@inject IJSRuntime JS


@rendermode InteractiveServer


@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext

<PageTitle>To-Do App</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="main-container d-flex justify-content-center align-items-center vh-100">
            <div class="col-md-4 bg-light bg-opacity-75 p-4 rounded">
                @if (!showTodoContent)
                {
                <h1>Validate CPR!</h1>
                <p>Please enter your CPR number to access your To-Do list:</p>
                <p>User: @userEmail</p> <!-- Display user's email -->
                    <EditForm Model="Input" OnValidSubmit="HandleValidSubmit" FormName="validateCPR">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off" placeholder="Please enter the code." />
                            <label for="code" class="control-label form-label">Enter CPR</label>
                            <ValidationMessage For="() => Input.Code" class="text-danger" />
                        </div>

                        <button type="submit" class="w-100 btn btn-lg btn-primary">Submit</button>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <p class="@(isSuccess ? "text-success" : "text-danger")">@validationMessage</p>
                    }
                }


                @if (showTodoContent)
                {
                    <ServerSide.Components.Account.Pages.TodoManager UserId="@userId" />
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="main-container d-flex justify-content-center align-items-center vh-100">
            <div class="text-center bg-light bg-opacity-75 p-4 rounded">
                <h1>Welcome to the To-Do App!</h1>
                <p>This application helps you manage your tasks effectively.</p>
                <p>Please log in to access your personal To-Do list.</p>

                <div class="button-container">
                    <a class="btn btn-primary" href="/account/login">Login</a>
                    <a class="btn btn-secondary" href="/account/register">Register</a>
                </div>
            </div>
        </div>
    </NotAuthorized>


</AuthorizeView>

@code {
    private string validationMessage;
    private string userEmail;
    private string? userId;  // Ensure this is set
    private bool isSuccess = false;
    private bool showTodoContent = false;
    private bool isUserAuthenticated; // Flag to check if user is authenticated

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // List of To-Do items
    private List<Todolist> todoItems = new();

    // Inject AuthenticationStateProvider
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        isUserAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isUserAuthenticated)
        {
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value ?? "Unknown";
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Remove local storage key if the user is not authenticated
            if (!isUserAuthenticated)
            {
                await JS.InvokeVoidAsync("localStorage.removeItem", "cprValidated");
            }

            var isCprValidated = await JS.InvokeAsync<string>("localStorage.getItem", "cprValidated");
            if (isCprValidated == "true")
            {
                showTodoContent = true;
                StateHasChanged(); // Trigger UI refresh
            }
        }
    }


    private async Task HandleValidSubmit()
    {

        // Trim spaces from input
        Input.Code = Input.Code.Trim();
        bool isValid = await ValidateCprAsync(Input.Code);

        if (isValid)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "cprValidated", "true");
        }
    }

    private async Task<bool> ValidateCprAsync(string cpr)
    {
        if (string.IsNullOrWhiteSpace(cpr))
        {
            isSuccess = false;
            validationMessage = "CPR is required.";
            return false;
        }

        // Trim and remove spaces/hyphens
        string formattedCpr = FormatCpr(cpr);

        try
        {
            // Look up the CPR in the database for the current user
            var cprRecord = await DbContext.Cprs
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cprRecord != null && cprRecord.CprNumber == formattedCpr)
            {
                isSuccess = true;
                validationMessage = "CPR validation successful!";
                showTodoContent = true;

                return true;
            }
            else
            {
                isSuccess = false;
                validationMessage = "Invalid CPR number. Please try again.";
                showTodoContent = false;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            validationMessage = "An error occurred during validation. Please try again.";
            Console.WriteLine($"Error validating CPR: {ex.Message}");
            return false;
        }
    }

    // Helper method to clean up CPR input
    private string FormatCpr(string cpr)
    {
        return cpr.Trim().Replace("-", "").Replace(" ", "");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "CPR is required.")]
        [StringLength(10, ErrorMessage = "The {0} must be exactly {1} digits long.", MinimumLength = 10)]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "CPR must be exactly 10 digits and contain only numbers.")]
        [DataType(DataType.Text)]
        [Display(Name = "CPR Code")]
        public string Code { get; set; } = "";
    }
}
