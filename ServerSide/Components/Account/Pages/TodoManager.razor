@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using ServerSide.Data
@inject ApplicationDbContext DbContext

<div class="container mt-5">
    <h2 class="text-center">Your To-Do List</h2>

    <EditForm Model="newTodoItem" OnValidSubmit="AddTodoItem" class="mb-4">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="form-floating mb-3">
            <InputText @bind-Value="newTodoItem.Title" class="form-control" placeholder="Enter your task" />
            <label class="form-label">Title</label>
            <ValidationMessage For="() => newTodoItem.Title" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="newTodoItem.Description" class="form-control" placeholder="Enter description" />
            <label class="form-label">Description</label>
            <ValidationMessage For="() => newTodoItem.Description" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-success">Add To-Do</button>
    </EditForm>

    <ul class="list-group">
        @if (todoItems.Count > 0)
        {
            @foreach (var item in todoItems)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@item.Title</strong><br />
                        <small>@item.Description</small><br />
                        <small class="text-muted">Created: @item.createdDate.ToString("g")</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <InputCheckbox @bind-Value="item.IsCompleted" class="form-check-input me-2" @onchange="() => UpdateTodoStatus(item)" />
                        <span class="badge @(item.IsCompleted ? "bg-success" : "bg-warning")">
                            @(item.IsCompleted ? "Completed" : "Pending")
                        </span>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveTodoItem(item.Id)">Remove</button>
                    </div>
                </li>
            }
        }
        else
        {
            <li class="list-group-item text-center">No To-Do items found.</li>
        }
    </ul>
</div>

@code {
    private List<Todolist> todoItems = new();
    private TodoItemModel newTodoItem = new();

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodoItems();
    }

    private async Task LoadTodoItems()
    {
        todoItems = await DbContext.Todolists
            .Where(t => t.UserId == UserId)
            .OrderByDescending(t => t.createdDate)
            .ToListAsync();
    }

    private async Task AddTodoItem()
    {
        if (!string.IsNullOrWhiteSpace(newTodoItem.Title))
        {
            var todo = new Todolist
                {
                    Title = newTodoItem.Title,
                    Description = newTodoItem.Description,
                    IsCompleted = newTodoItem.IsCompleted,
                    createdDate = DateTime.UtcNow,
                    UserId = UserId
                };

            DbContext.Todolists.Add(todo);
            await DbContext.SaveChangesAsync();
            newTodoItem = new(); // Reset the form
            await LoadTodoItems();
        }
    }

    private async Task RemoveTodoItem(int id)
    {
        var item = await DbContext.Todolists.FindAsync(id);
        if (item != null)
        {
            DbContext.Todolists.Remove(item);
            await DbContext.SaveChangesAsync();
            await LoadTodoItems();
        }
    }

    private async Task UpdateTodoStatus(Todolist item)
    {
        DbContext.Todolists.Update(item);
        await DbContext.SaveChangesAsync();
    }

    private class TodoItemModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public bool IsCompleted { get; set; } = false;
    }
}
